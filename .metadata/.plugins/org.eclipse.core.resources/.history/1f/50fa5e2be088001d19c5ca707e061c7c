package com.example.demo.service.impl;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.entity.Country;
import com.example.demo.entity.User;
import com.example.demo.exception.UserEmailNotFoundException;
import com.example.demo.repo.CityRepository;
import com.example.demo.repo.CountryRepository;
import com.example.demo.repo.StateRepository;
import com.example.demo.repo.UserRepository;
import com.example.demo.service.IUserService;

@Service

public class UserServiceImpl implements IUserService{
	
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private CountryRepository countryRepository;
	
	@Autowired
	private StateRepository stateRepository;
	
	@Autowired
	private CityRepository cityRepository;
	
	
	
	
	@Override
    public String checkEmail(User user) throws UserEmailNotFoundException {
		
		if(userRepository.existsByEmail(user.getEmail()) && userRepository.existsByPassword(user.getPassword())) {
        	
                 return "WelCome To Login Page:";
            
        }else {
        	
         	       return "Invalid Credentials:";
        }
        	
	}
	
	@Override
	public List<Country> getCountrieses(){
		
		List<Country> countries=countryRepository.findAll();
		
		return countries;
	}
	
	@Override
	public Map<Integer,String> getStateses(Integer id){
		
		// create empty map to store results in. If we don't find results, an empty hashmap will be returned
		Map<Integer,String> results = new HashMap<Integer, String>();

	    EntityManager em = entityManagerFactory.createEntityManager();
	    
	 // get the stateId,stateNames
	    String jpaQuery = "Select s.stateId,s.stateNames from State s where s.countryId=:id";
	    
	 // get the distinct stateId,stateNames
	    List<Map<Integer,String>> states = (List<Map<Integer,String>>) em.createQuery(jpaQuery).getResultList();
		
		//List<Map<Integer,String>> states=stateRepository.getstates(id);
		
		 return states;
		}
	
		
	
	
	
	@Override
	public List<Map<Integer,String>> getCitieses(Integer id){
		
		List<Map<Integer,String>> cities=cityRepository.getCities(id);
		
		return cities;
	}
	
	@Override
	public String registerUser(User user) {
		
		userRepository.save(user);
	     return "User Created";
	        }
	}
