package com.example.demo.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.entity.User;
import com.example.demo.exception.UserEmailNotFoundException;
import com.example.demo.repo.CityRepository;
import com.example.demo.repo.CountryRepository;
import com.example.demo.repo.StateRepository;
import com.example.demo.repo.UserRepository;
import com.example.demo.service.IUserService;
import com.example.demo.service.UnlockAccForm;

@Service

public class UserServiceImpl implements IUserService {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private CountryRepository countryRepository;

	@Autowired
	private StateRepository stateRepository;

	@Autowired
	private CityRepository cityRepository;

	@Override
	public String checkEmail(User user) throws UserEmailNotFoundException {

		if (userRepository.existsByEmail(user.getEmail()) && userRepository.existsByPassword(user.getPassword())) {

			return "WelCome To Login Page:";

		} else {

			return "Invalid Credentials:";
		}

	}

	@Override
	public Map<Integer, String> fetchCountryIdAndName() {

		List<Object[]> result = countryRepository.fetchCountryIdAndName();

		Map<Integer, String> map = null;
		if (result != null && !result.isEmpty()) {
			map = new HashMap<Integer, String>();
			for (Object[] object : result) {
				map.put(((Integer) object[0]), (String) object[1]);
			}
		}

		return map;
	}

	@Override
	public Map<Integer, String> fetchStateIdAndName(Integer id) {

		List<Object[]> result = stateRepository.fetchStateIdAndName(id);
		Map<Integer, String> map = null;
		if (result != null && !result.isEmpty()) {
			map = new HashMap<Integer, String>();
			for (Object[] object : result) {
				map.put(((Integer) object[0]), (String) object[1]);
			}
		}
		return map;
	}

	@Override
	public Map<Integer, String> fetchCityIdAndName(Integer id) {

		List<Object[]> result = cityRepository.fetchCityIdAndName(id);

		Map<Integer, String> map = null;
		if (result != null && !result.isEmpty()) {
			map = new HashMap<Integer, String>();
			for (Object[] object : result) {
				map.put(((Integer) object[0]), (String) object[1]);
			}
		}

		return map;
	}

	@Override
	public String registerUser(User user) {

		userRepository.save(user);
		return "User Created";
	}
	@Override
	public String unlockAccount(UnlockAccForm accForm) {
		return null;
	}
}
